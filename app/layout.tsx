"use client";

import "./globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { useRouter } from "next/navigation";

import React from "react";
import { Box } from "@mui/material";
import { TopNavBar } from "./TopNavBar";
import { LeftNavDrawer } from "./LeftNavDrawer";
import { filterNavigationActions } from "./navigation.util";
import { Apps } from "@mui/icons-material";
import ContactsIcon from "@mui/icons-material/Contacts";
import GroupIcon from "@mui/icons-material/Group";
import MonetizationOnIcon from "@mui/icons-material/MonetizationOn";
import ContactSupportIcon from "@mui/icons-material/ContactSupport";
import SearchInput from "./components/SearchInput";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// export default function RootLayout({
//   children,
// }: {
//   children: React.ReactNode
// }) {
//   return (
//     <html lang="en">
//       <body className={inter.className}>{children}</body>
//     </html>
//   )
// }

const Layout = ({
  label,
  navigationActions = [],
  navigationClick = () => {},
  topNavHeight = 64,
  leftNavMinWidth = 64,
  leftNavMaxWidth = 240,
  isAuthorized,
  children,
}: LayoutProps) => {
  const [open, setOpen] = React.useState(false);
  const [selectedNav, setSelectedNav]: any = React.useState();

  const router = useRouter();

  const expandNav = () => setOpen(true);
  const collapseNav = () => setOpen(false);

  const navClickHandler = (action: NavigationAction) => {
    setSelectedNav(action);
    // navigationClick(action);
    router.push(action.path || "");
  };

  navigationActions = [
    {
      key: "DatePicker",
      label: "DatePicker",
      ariaLabel: "DatePicker",
      authFilter: "authorized",
      position: "top",
      // Component: <DatePicker maxDate={lastDayOfYear(new Date())} />,
      Component: (
        <SearchInput
          searchHandler={() => console.log("Search")}
          label="Search"
          variant="outlined"
        />
      ),
      snapPosition: "right",
    },
    // {
    //   key: "DatePicker",
    //   label: "DatePicker",
    //   ariaLabel: "DatePicker",
    //   authFilter: "authorized",
    //   position: "left",
    //   // Component: <DatePicker maxDate={lastDayOfYear(new Date())} />,
    //   Component: <NavComponent />,
    // },
    {
      key: "Form",
      label: "Form",
      icon: <Apps />,
      ariaLabel: "Form",
      path: "/form",
      authFilter: "authorized",
      position: "left",
    },
    {
      divider: true,
      authFilter: "always",
      position: "left",
    },
    {
      key: "Cases",
      label: "Cases",
      icon: <ContactSupportIcon />,
      ariaLabel: "Cases",
      path: "/cases",
      authFilter: "authorized",
      position: "left",
    },
    {
      key: "Accounts",
      label: "Accounts",
      icon: <GroupIcon />,
      ariaLabel: "Accounts",
      path: "/accounts",
      authFilter: "authorized",
      position: "left",
    },
    {
      key: "Contacts",
      label: "Contacts",
      icon: <ContactsIcon />,
      ariaLabel: "Contacts",
      path: "/contacts",
      authFilter: "authorized",
      position: "left",
    },
    {
      key: "Opportunities",
      label: "Opportunities",
      icon: <MonetizationOnIcon />,
      ariaLabel: "Opportunities",
      path: "/opportunities",
      authFilter: "authorized",
      position: "left",
    },
  ];

  const { topNavActions, leftNavActions, leftNavCount } = getNavigationActions(
    navigationActions,
    // isAuthorized
    true
  );

  let baseClassNames = ["base-application"];
  baseClassNames.push(open ? "expanded" : "contracted");

  console.log(leftNavActions);

  return (
    <html>
      <body className={inter.className}>
        <Box
          className={baseClassNames.join(" ")}
          sx={{
            display: "flex",
            flexGrow: 1,
          }}
          aria-label="Base application"
        >
          <TopNavBar
            isAuthorized={isAuthorized}
            topNavActions={topNavActions}
            navClickHandler={navClickHandler}
            selectedNav={selectedNav}
            label={label}
            expandNav={expandNav}
            open={open}
            showMenu={!!leftNavCount}
            topNavHeight={topNavHeight}
            maxWidth={leftNavMaxWidth}
          />

          <LeftNavDrawer
            isAuthorized={true}
            leftNavigationActions={leftNavActions}
            leftNavigationClick={navClickHandler}
            selectedNav={selectedNav}
            open={open}
            showDrawer={!!leftNavCount}
            collapseNav={collapseNav}
            minWidth={leftNavMinWidth}
            maxWidth={leftNavMaxWidth}
            topNavHeight={topNavHeight}
          />

          <Box
            className={"base-page-container"}
            sx={{
              marginTop: `${topNavHeight}px`,
              marginLeft: open
                ? `${leftNavMaxWidth}px`
                : `${leftNavMinWidth}px`,
              width: "100%",
              height: "100%",
              padding: "24px",
            }}
          >
            {children}
          </Box>
        </Box>
      </body>
    </html>
  );
};

const getNavigationActions = (
  navigationActions: Array<NavigationAction>,
  isAuthorized: boolean
) => {
  const topNavActions = navigationActions
    .filter((a: NavigationAction) => a.position === "top")
    .filter((a: NavigationAction) => {
      return filterNavigationActions({
        action: a,
        isAuthorized,
      });
    });

  const leftNavActions = navigationActions
    .filter((a: NavigationAction) => a.position !== "top")
    .filter((a: NavigationAction) => {
      return filterNavigationActions({
        action: a,
        isAuthorized,
      });
    });

  return {
    topNavActions,
    leftNavActions,
    // Filter any dividers
    leftNavCount: leftNavActions.filter((a: NavigationAction) => !a.divider)
      .length,
  };
};

interface LayoutProps {
  /**
     Title of application
   */
  label?: string;
  /**
   * List of all navigation actions in left navigation and app bar
   */
  navigationActions?: Array<NavigationAction>;
  /**
   * Current user authorized status
   */
  isAuthorized: boolean;
  /**
   * Event when navigation is clicked, returns navigation item
   */
  navigationClick?: Function;
  /**
   * Top navigation bar height
   */
  topNavHeight?: number;
  /**
   * Left navigation drawer collapsed width
   */
  leftNavMinWidth?: number;
  /**
   * Left navigation drawer expanded width
   */
  leftNavMaxWidth?: number;
  /**
   * All child elements
   */
  children?: any;
}

export interface NavigationAction {
  key?: string;
  /**
   * Display actions on authorization state
   * always: Always show regardless of auth status
   * authorized: Only show when user is authorized
   * unauthorized: Only show when user is not authorized
   */
  authFilter: "always" | "authorized" | "unauthorized";
  /**
   * Display text to the user
   */
  label?: string;
  /**
   * Aria text
   */
  ariaLabel?: string;
  /**
   * MUI Icon to display
   */
  icon?: React.ReactElement | null;
  /**
   * Display a divider in navigation
   */
  divider?: Boolean;
  /**
   * Path to redirect to on nav click
   */
  path?: string;
  /**
   * Define which navigation area to display the action
   * left: Left navigation drawer
   * top: Top app navigation
   */
  position: "left" | "top";
  /**
   * Render custom nav component
   */
  Component?: React.ReactElement | null;
  /**
   * Snap custom component to position in app bar
   */
  snapPosition?: "left" | "center" | "right";
}

const NavComponent = () => {
  return <div>My Nav</div>;
};

export default Layout;
